{"ast":null,"code":"var _jsxFileName = \"D:\\\\Clase\\\\Segundo\\\\PGV\\\\websockets\\\\frontend\\\\src\\\\App.js\";\nimport ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { Card, Avatar, Input, Typography, Button, Divider } from 'antd';\nimport 'antd/dist/reset.css';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Search\n} = Input;\nconst {\n  Text\n} = Typography;\nconst {\n  Meta\n} = Card;\nconst client = new W3CWebSocket('ws://127.0.0.1:8000');\nexport default class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      userName: '',\n      isLoggedIn: false,\n      myMessage: null,\n      messages: [],\n      count: 1\n    };\n    this.onButtonClicked = prevState => {\n      this.setState({\n        count: prevState + 1\n      });\n      client.send(JSON.stringify({\n        type: \"message\",\n        msg: this.state.count,\n        user: this.state.userName\n      }));\n    };\n  }\n  componentDidMount() {\n    client.onopen = () => {\n      console.log('WebSocket Client Connected');\n    };\n    client.onmessage = message => {\n      const dataFromServer = JSON.parse(message.data);\n      console.log('got reply! ', dataFromServer);\n      if (dataFromServer.type === \"message\" && dataFromServer.user == this.state.userName) {\n        console.log(\"luismiguel\");\n        console.log(\"comida\");\n        this.setState({\n          myMessage: dataFromServer\n        });\n      } else if (dataFromServer.type === \"message\") {\n        console.log(\"rarara\");\n        this.state.messages.forEach((element, index) => {\n          if (element['user'] == dataFromServer.user) {\n            this.setState(state => ({\n              messages: {\n                ...state.messages[index],\n                msg: dataFromServer.msg\n              }\n            }));\n          } else {\n            this.setState(state => ({\n              messages: [...state.messages, {\n                msg: dataFromServer.msg,\n                user: dataFromServer.user\n              }]\n            }));\n          }\n        });\n      }\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      id: \"wrapper\",\n      children: this.state.isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            id: \"main-heading\",\n            type: \"secondary\",\n            style: {\n              fontSize: '36px'\n            },\n            children: \"Megaclicker\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            paddingBottom: 50\n          },\n          id: \"messages\",\n          children: [/*#__PURE__*/_jsxDEV(Divider, {\n            style: {\n              width: 300,\n              paddingTop: 20\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              style: {\n                width: 300,\n                height: 100\n              },\n              onClick: value => this.onButtonClicked(this.state.count),\n              children: \"CLICK ME PLEASE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), this.state.myMessage ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              style: {\n                width: 300,\n                margin: '16px 4px 0 4px',\n                alignSelf: this.state.userName === this.state.myMessage.user ? 'flex-start' : 'flex-start'\n              },\n              loading: false,\n              children: /*#__PURE__*/_jsxDEV(Meta, {\n                avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n                  style: {\n                    color: '#f56a00',\n                    backgroundColor: '#fde3cf'\n                  },\n                  children: this.state.myMessage.user[0].toUpperCase()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 25\n                }, this),\n                title: this.state.myMessage.user + \":\",\n                description: this.state.myMessage.msg\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 21\n              }, this)\n            }, this.state.myMessage.msg, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 19\n            }, this)\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 19\n          }, this), this.state.messages.map(message => /*#__PURE__*/_jsxDEV(Card, {\n            style: {\n              width: 300,\n              margin: '16px 4px 0 4px',\n              alignSelf: this.state.userName === message.user ? 'flex-start' : 'flex-start'\n            },\n            loading: false,\n            children: /*#__PURE__*/_jsxDEV(Meta, {\n              avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n                style: {\n                  color: '#f56a00',\n                  backgroundColor: '#fde3cf'\n                },\n                children: message.user[0].toUpperCase()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 23\n              }, this),\n              title: message.user + \":\",\n              description: message.msg\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 19\n            }, this)\n          }, message.msg, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '200px 40px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Search, {\n          placeholder: \"Enter Username\",\n          enterButton: \"Login\",\n          size: \"large\",\n          onSearch: value => this.setState({\n            isLoggedIn: true,\n            userName: value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n}\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 130,\n  columnNumber: 17\n}, this), document.getElementById('root'));","map":{"version":3,"names":["ReactDOM","React","Component","w3cwebsocket","W3CWebSocket","Card","Avatar","Input","Typography","Button","Divider","Search","Text","Meta","client","App","state","userName","isLoggedIn","myMessage","messages","count","onButtonClicked","prevState","setState","send","JSON","stringify","type","msg","user","componentDidMount","onopen","console","log","onmessage","message","dataFromServer","parse","data","forEach","element","index","render","fontSize","display","flexDirection","paddingBottom","width","paddingTop","height","value","margin","alignSelf","color","backgroundColor","toUpperCase","map","padding","document","getElementById"],"sources":["D:/Clase/Segundo/PGV/websockets/frontend/src/App.js"],"sourcesContent":["import ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { Card, Avatar, Input, Typography, Button, Divider } from 'antd';\nimport 'antd/dist/reset.css';\nimport './App.css'\n\nconst { Search } = Input;\nconst { Text } = Typography;\nconst { Meta } = Card;\n\nconst client = new W3CWebSocket('ws://127.0.0.1:8000');\n\nexport default class App extends Component {\n\n  state = {\n    userName: '',\n    isLoggedIn: false,\n    myMessage: null,\n    messages: [],\n    count: 1,\n  }\n\n\n  onButtonClicked = (prevState) => {\n    this.setState({ count: prevState + 1 })\n    client.send(JSON.stringify({\n      type: \"message\",\n      msg: this.state.count,\n      user: this.state.userName\n    }));\n\n  }\n  componentDidMount() {\n    client.onopen = () => {\n      console.log('WebSocket Client Connected');\n    };\n    client.onmessage = (message) => {\n      const dataFromServer = JSON.parse(message.data);\n      console.log('got reply! ', dataFromServer);\n      if (dataFromServer.type === \"message\" && dataFromServer.user == this.state.userName) {\n        console.log(\"luismiguel\")\n        console.log(\"comida\");\n        this.setState({ myMessage: dataFromServer })\n      } else if (dataFromServer.type === \"message\") {\n        console.log(\"rarara\");\n        this.state.messages.forEach((element, index) => {\n\n          if (element['user'] == dataFromServer.user) {\n            this.setState((state) =>\n            ({\n              messages: {\n                ...state.messages[index],\n                msg: dataFromServer.msg,\n              }\n\n            })\n            )\n\n          }\n          else {\n            this.setState((state) =>\n            ({\n              messages: [...state.messages,\n              {\n                msg: dataFromServer.msg,\n                user: dataFromServer.user\n              }]\n            })\n            )\n          }\n        });\n      }\n    };\n  }\n  render() {\n    return (\n      <div className=\"main\" id='wrapper'>\n        {this.state.isLoggedIn ?\n          <div>\n            <div className=\"title\">\n              <Text id=\"main-heading\" type=\"secondary\" style={{ fontSize: '36px' }}>Megaclicker</Text>\n            </div>\n            <div style={{ display: 'flex', flexDirection: 'column', paddingBottom: 50 }} id=\"messages\">\n              <Divider style={{ width: 300, paddingTop: 20 }}>\n                <Button style={{ width: 300, height: 100 }} onClick={value => this.onButtonClicked(this.state.count)}>CLICK ME PLEASE</Button>\n              </Divider>\n              {this.state.myMessage ?\n                <>\n                  <Card key={this.state.myMessage.msg} style={{ width: 300, margin: '16px 4px 0 4px', alignSelf: this.state.userName === this.state.myMessage.user ? 'flex-start' : 'flex-start' }} loading={false}>\n                    <Meta\n                      avatar={\n                        <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }}>{this.state.myMessage.user[0].toUpperCase()}</Avatar>\n                      }\n                      title={this.state.myMessage.user + \":\"}\n                      description={this.state.myMessage.msg}\n                    />\n                  </Card></>\n                : <div></div>}\n\n              {this.state.messages.map(message =>\n                <Card key={message.msg} style={{ width: 300, margin: '16px 4px 0 4px', alignSelf: this.state.userName === message.user ? 'flex-start' : 'flex-start' }} loading={false}>\n                  <Meta\n                    avatar={\n                      <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }}>{message.user[0].toUpperCase()}</Avatar>\n                    }\n                    title={message.user + \":\"}\n                    description={message.msg}\n                  />\n                </Card>\n              )}\n\n            </div>\n          </div>\n          :\n          <div style={{ padding: '200px 40px' }}>\n            <Search\n              placeholder=\"Enter Username\"\n              enterButton=\"Login\"\n              size=\"large\"\n              onSearch={value => this.setState({ isLoggedIn: true, userName: value })}\n            />\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}